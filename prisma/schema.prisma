datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Main Models
model ChileanCompany {
  id                      Int      @id @default(autoincrement())
  name                    String?
  rut                     String?  @unique
  CodeIATA                String?
  SiiResNumber            Int?
  SiiResDate              DateTime?
  InvoiceEnabledSii       Boolean  @default(false)
  SocialReason            String?
  email                   String?
  phoneNumber             String?
  
  // Representative information
  representativeName      String?
  representativeRut       String?  
  bookSendingRut          String?   
  ChecksPP                String?
  Accountantname          String?
  AccountantRut           String?  
  
  // Currency information
  firstCurrency           String?
  firstMask               String?
  firstConversion         String?
  secondCurrency          String?
  secondConversion        String?
  secondMask              String?
  thirdCurrencyd          String?
  thirdConversion         String?
  thirdMask               String?
  
  // Tax information
  vat                     Decimal?  @db.Decimal(10, 2)
  retention               Decimal?  @db.Decimal(10, 2)
  
  // Designated users
  designatedVendorId      Int?
  designatedOperatorId    Int?
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  // Relations
  designatedVendor        User?    @relation("CompanyVendor", fields: [designatedVendorId], references: [id])
  designatedOperator      User?    @relation("CompanyOperator", fields: [designatedOperatorId], references: [id])
  seaQuotes               SeaQuote[]
  airQuotes               AirQuote[] @relation("AirQuoteClient")
  landQuotes              LandQuote[] @relation("LandQuoteClient")
}

model User {
  id           Int       @id @default(autoincrement())
  firstName    String?
  lastName     String?
  username     String    @unique
  email        String?   @unique
  rut          String?   @unique
  address      String?
  password     String
  profileColor String    @default("#5160D3") // Light Blue default
  active       Boolean   @default(true)
  lastAccess   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  roles                    UserRole[]
  companiesAsVendor        ChileanCompany[] @relation("CompanyVendor")
  companiesAsOperator      ChileanCompany[] @relation("CompanyOperator")
  
  // Quotation relations
  seaQuotesAsVendor        SeaQuote[] @relation("SeaQuoteVendor")
  seaQuotesAsOperator      SeaQuote[] @relation("SeaQuoteOperator")
  seaQuotesUpdated         SeaQuote[] @relation("SeaQuoteUpdatedBy")
  
  airQuotesAsVendor        AirQuote[] @relation("AirQuoteVendor")
  airQuotesAsOperator      AirQuote[] @relation("AirQuoteOperator")
  airQuotesUpdated         AirQuote[] @relation("AirQuoteUpdatedBy")
  
  landQuotesAsVendor       LandQuote[] @relation("LandQuoteVendor")
  landQuotesAsOperator     LandQuote[] @relation("LandQuoteOperator")
  landQuotesUpdated        LandQuote[] @relation("LandQuoteUpdatedBy")
}

model Role {
  id      Int    @id @default(autoincrement())
  name    String @unique
  
  // Relationsnodpe 
  users   UserRole[]
}

model UserRole {
  id     Int  @id @default(autoincrement())
  userId Int
  roleId Int
  
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
}

// Cargo and Container Models
model CargoType {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model CargoCondition {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model ContainerType {
  id   Int    @id @default(autoincrement())
  name String @unique
}



// Service and Cost Models
model CostType {
  id   Int    @id @default(autoincrement())
  name String @unique
  
  // Relations
  invoiceConcepts   InvoiceConcept[]
}

model ServiceType {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model FreightCondition {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model PurchaseClause {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model InvoiceConcept {
  id      Int    @id @default(autoincrement())
  name    String
  ASLType String // JSON string of array
  
  // Relations
  costTypeId Int
  costType   CostType @relation(fields: [costTypeId], references: [id])
}

// Container and Status Models
model ContainerStatus {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model HouseType {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Incoterm {
  id   Int    @id @default(autoincrement())
  name String @unique
}

// Transport Models
model Vessel {
  id      Int    @id @default(autoincrement())
  name    String
  code    String?
  onuCode String?
}

model Port {
  id          String @id
  name        String
  country     String
  address     String
  type        String?
  onuCode     String?
  countryCode String?
  portCode    String?
  location    String?
}

model LandTransportType {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Airport {
  id      Int     @id @default(autoincrement())
  name    String 
  address String?
  country String?
  code    String? @unique
}

model Warehouse {
  id      Int    @id @default(autoincrement())
  name    String
  address String?
  country String?
}

// Contact Models
model ContactType {
  id   Int    @id @default(autoincrement())
  name String @unique
  
  // Relations
  contactPersons ContactPerson[]
}

model ContactPerson {
  id                    Int    @id @default(autoincrement())
  contactTypeId         Int
  country               String
  fullName              String
  rut                   String   @db.VarChar(32)
  lineOfBussines        String
  address               String
  email                 String
  phoneNumber           String
  contactName           String
  assignedEmployeeName  String
  seaVoucher            String?
  skyVouche             String?
  landVoucher           String?
  invoiceObservations   String?
  invoiceInfo           String?
  
  // Relations
  contactType           ContactType @relation(fields: [contactTypeId], references: [id])
  seaQuotes             SeaQuote[]
  airQuotes             AirQuote[] @relation("AirQuoteClient")
  landQuotes            LandQuote[] @relation("LandQuoteClient")
}

// Currency and Package Models
model Currency {
  id                           Int     @id @default(autoincrement())
  name                         String
  alias                        String
  parity                       Decimal @db.Decimal(10, 2)
  usdConversion                Decimal @db.Decimal(10, 2)
  exchangeRateTaxableInvoice   Decimal @db.Decimal(10, 2)
  tcExemptInvoice              Decimal @db.Decimal(10, 2)cd 
}

model PackageType {
  id   Int    @id @default(autoincrement())
  name String @unique
}

// Quotation Models
model SeaQuote {
  id                    Int      @id @default(autoincrement())
  
  // User relationships
  designatedVendorId    Int?
  designatedOperatorId  Int?
  lastUpdatedById       Int
  
  // Client (can be one of three types)
  clientType            String   // 'string', 'chileanCompany', 'contactPerson'
  clientString          String?  // When clientType is 'string'
  clientChileanCompanyId Int?    // When clientType is 'chileanCompany'
  clientContactPersonId Int?     // When clientType is 'contactPerson'
  
  // Snapshot data from database (not relationships)
  incotermSnapshot      Json     // Stores incoterm data
  originPortSnapshot    Json     // Stores origin port data
  destinationPortSnapshot Json   // Stores destination port data
  cargoTypeSnapshot     Json     // Stores cargo type data
  currencySnapshot      Json     // Stores currency data
  
  // Direct fields
  validityDate          DateTime?
  localConditions       String?
  localExpenses         Decimal? @db.Decimal(12, 2)
  demurrageTime         String?  // Time in days as string
  dthc                  Decimal? @db.Decimal(12, 2)
  appliedCurrency       String?
  localOfficeData       String?  @db.Text
  
  // Cargo data as JSON array (no relationships)
  cargoData             Json     // Array of cargo items
  
  // Status and timestamps
  status                String   // 'in_progress', 'approved', 'canceled'
  creationDate          DateTime @default(now())
  lastUpdatedAt         DateTime @updatedAt
  approvalDate          DateTime?
  
  // Relations
  designatedVendor      User?    @relation("SeaQuoteVendor", fields: [designatedVendorId], references: [id])
  designatedOperator    User?    @relation("SeaQuoteOperator", fields: [designatedOperatorId], references: [id])
  lastUpdatedBy         User     @relation("SeaQuoteUpdatedBy", fields: [lastUpdatedById], references: [id])
  clientChileanCompany  ChileanCompany? @relation(fields: [clientChileanCompanyId], references: [id])
  clientContactPerson   ContactPerson?  @relation(fields: [clientContactPersonId], references: [id])
}

model AirQuote {
  id                    Int      @id @default(autoincrement())
  
  // User relationships
  designatedVendorId    Int?
  designatedOperatorId  Int?
  lastUpdatedById       Int
  
  // Client (can be one of three types)
  clientType            String   // 'string', 'chileanCompany', 'contactPerson'
  clientString          String?
  clientChileanCompanyId Int?
  clientContactPersonId Int?
  
  // Snapshot data (no containers for air)
  incotermSnapshot      Json
  originAirportSnapshot Json
  destinationAirportSnapshot Json
  cargoTypeSnapshot     Json
  currencySnapshot      Json
  
  // Air-specific fields
  validityDate          DateTime?
  localConditions       String?
  localExpenses         Decimal? @db.Decimal(12, 2)
  appliedCurrency       String?
  localOfficeData       String?  @db.Text
  
  // Air cargo data (different structure than sea)
  cargoData             Json
  
  // Status and timestamps
  status                String
  creationDate          DateTime @default(now())
  lastUpdatedAt         DateTime @updatedAt
  approvalDate          DateTime?
  
  // Relations
  designatedVendor      User?    @relation("AirQuoteVendor", fields: [designatedVendorId], references: [id])
  designatedOperator    User?    @relation("AirQuoteOperator", fields: [designatedOperatorId], references: [id])
  lastUpdatedBy         User     @relation("AirQuoteUpdatedBy", fields: [lastUpdatedById], references: [id])
  clientChileanCompany  ChileanCompany? @relation("AirQuoteClient", fields: [clientChileanCompanyId], references: [id])
  clientContactPerson   ContactPerson?  @relation("AirQuoteClient", fields: [clientContactPersonId], references: [id])
}

model LandQuote {
  id                    Int      @id @default(autoincrement())
  
  // User relationships
  designatedVendorId    Int?
  designatedOperatorId  Int?
  lastUpdatedById       Int
  
  // Client (can be one of three types)
  clientType            String   // 'string', 'chileanCompany', 'contactPerson'
  clientString          String?
  clientChileanCompanyId Int?
  clientContactPersonId Int?
  
  // Snapshot data
  incotermSnapshot      Json
  originLocationSnapshot Json
  destinationLocationSnapshot Json
  cargoTypeSnapshot     Json
  currencySnapshot      Json
  
  // Land-specific fields
  validityDate          DateTime?
  localConditions       String?
  localExpenses         Decimal? @db.Decimal(12, 2)
  appliedCurrency       String?
  localOfficeData       String?  @db.Text
  
  // Land cargo data
  cargoData             Json
  
  // Status and timestamps
  status                String
  creationDate          DateTime @default(now())
  lastUpdatedAt         DateTime @updatedAt
  approvalDate          DateTime?
  
  // Relations
  designatedVendor      User?    @relation("LandQuoteVendor", fields: [designatedVendorId], references: [id])
  designatedOperator    User?    @relation("LandQuoteOperator", fields: [designatedOperatorId], references: [id])
  lastUpdatedBy         User     @relation("LandQuoteUpdatedBy", fields: [lastUpdatedById], references: [id])
  clientChileanCompany  ChileanCompany? @relation("LandQuoteClient", fields: [clientChileanCompanyId], references: [id])
  clientContactPerson   ContactPerson?  @relation("LandQuoteClient", fields: [clientContactPersonId], references: [id])
} 